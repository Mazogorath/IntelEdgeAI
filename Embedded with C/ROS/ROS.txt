전체 과정
1. ROS 조립
2. 리모트 PC 세팅 (Ubuntu, ROS, Turtlebot3 패키지 설치)
3. ROS에 IP 할당 (50-clout-init.yaml, hostname, bashrc 수정 등 필요)
4. SLAM 실험 - Inflation Radius 등 mapping과 관련된 yaml 수정
5. 카메라 세팅 - opencv lib, ffmpeg 등 다운로드, intrinsic/extrinsic camera calibration 설정
6. 자율주행 실험 - roslaunch turtlebot3_autorace_driving turtlebot3_autorace_control_lane.launch



URL

https://www.ros.org/ //ROS 홈페이지
https://github.com/ROBOTIS-GIT/turtlebot3 - 터틀봇 Github
https://github.com/ROBOTIS-GIT/OpenCR - OPENCR Github
https://www.raspberrypi.com/documentation/ - Raspberry Pi 메뉴얼
https://www.st.com/en/microcontrollers-microprocessors/stm32f746zg.html - STM32F746 데이터시트
http://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php - CORTEX A53 데이터시트
https://emanual.robotis.com/docs/en/platform/turtlebot3/overview - 터틀봇 메뉴얼
https://emanual.robotis.com/docs/en/parts/controller/opencr10/ - OPENCR 메뉴얼
https://emanual.robotis.com/docs/en/dxl/x/xm430-w350/ - DYNAMIXEL (모터) 메뉴얼
https://emanual.robotis.com/docs/en/platform/turtlebot3/appendix_lds_01/ - LIDAR 메뉴얼
http://wiki.ros.org - ROS WIKI
https://roscon.ros.org/2023/ - ROSCON 홈페이지
http://openrtm.org/, http://www.orocos.org/, https://github.com/opros-wiki, https://yujinrobot.com/,
http://rosindustrial.org/ - 로봇 운영체제 관련 사이트들
http://repositories.ros.org/status_page/ros_noetic_default.html - 패키지 Repository



ROS 특징

ROS - 다양한 플랫폼에서, 로봇 행동 설계를 단순화하기 위한 도구와 라이브러리를 집대성한 소프트웨어
분산 프로세스 - 노드들은 독립적으로 실행되고 데이터를 주고 받음. 개별 노드의 추가/제거가 용이함
패키지 단위 관리 - 다양한 프로세스를 패키지 단위로 관리하기에 개발/공유/재배포가 쉽다
공개 Repository - Github 등에 공개 및 라이센스 배포
API 형태 - 단순히 API를 불러와 쉽게 삽입할 수 있도록 설계
복수의 프로그래밍 언어 지원 - C, Python 등
SLAM - Simultaneous Localization and Mapping
RQT, Rviz, Gazebo - ROS 상태 확인용 모니터링 툴



ROS 명령어

ROS Master - Node 간 연결과 메시지 통신을 위한 네임 서버 역할, http 기반인 XMLRPC 이용
ROS Node - 최소 단위의 프로세서, 하나의 실행 가능한 프로그램, XMLRPC나 TCP/IP 계열의 TCPROS 이용
ROS Package - ROS 소프트웨어의 모음, 최소 하나 이상의 Node나 타 패키지의 Node 실행을 위한 설정 파일 함유
ROS Message - 노드 간에 주고 받는 데이터
ROS Topic - Node 간에 Message를 주고받는 버스, Publisher에 의한 단방향 통신용, Subscriber는 여럿일 수 있음,
Message의 수신은 선택 사항, 비동기 방식(메시지를 주고 받는 속도가 다름)
ROS Service - Topic과 유사하나 1:1 통신, 동기 방식, 양방향 통신이라는 점에서 다름
Client의 Request에 대해 Server가 Response를 보냄
ROS Action - Client의 Goal에 대해 Server가 Feedback과 Result를 보내는 양방향 동기 방식의 통신
데이터는 Message 형식이고, Feedback은 작업이 완료되기 전에 보내는 중간 값임
ROS Parameter - ROS에서 사용하는 매개변수, Parameter 서버에 저장되고 rosparam 명령어로 읽고 씀.
Catkin - ROS 패키지의 구조, 설치/빌드 방법을 정의하는 관리 도구. CMake를 사용하여 패키지를 빌드함.
CMake - 소프트웨어 빌드 도구. 빌드 프로세스의 단계, 필요 도구와 라이브러리, 결과물을 정의함.
ROScore - 마스터를 구동하는 명령어
ROSrun/launch - 하나/여러개의 Node 실행 명령어
Bag - 메시지의 데이터를 저장하는 파일 포맷
Repository - 공개 Package가 저장된 URL 주소
CMakeLists.txt - CMake 설정 파일




Ubuntu 초기 설정

ROS 설치
1. apt-get update / apt-get upgrade //Package List 및 Package 업데이트
2. wget
https://raw.githubusercontent.com/ROBOTIS-GIT/robotis_tools/master/install_ros_noetic.sh
//ROBOTIS-GIT에서 install_ros_noetic.sh 파일 다운로드
3. chmod 755 ./install_ros_noetic.sh //install_ros_noetic.sh 파일을 실행 가능하게 변경
4. bash ./install_ros_noetic.sh //install_ros_noetic.sh를 실행, ROS를 설치
Dependent 설치 //TurtleBot3에 필요한 ROS Package 설치 (내용 생략)



TurtleBot3 Package 설치
1. cd ~/catkin_ws/src/ //해당 폴더로 이동
2. git clone -b noetic-devel https://github.com/ROBOTIS-GIT/DynamixelSDK.git //DynamixelSDK
Repository를 Catkin 워크스페이스에 클론해오기
3. git clone -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git
//Turtlebot3_msgs를 Catkin 워크스페이스에 클론해오기
4. git clone -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3.git //Turtlebot3를 Catkin
워크스페이스에 클론해오기
5. cd ~/catkin_ws && catkin_make //폴더로 이동 후 Package들을 catkin_ws에 빌드함, 반드시
catkin_ws에서 할 것



환경 변수에 ip 반영
1. ifconfig로 ip주소 확인
2. gedit ~/.bashrc로 .bashrc 파일 불러오기
3. master_uri와 hostname에서 localhost를 ip주소로 치환
4. source ~/.bashrc 명령어로 ROS 환경변수 반영



실행 및 테스트
1. roscore //ROS 코어 기동, Master와 Rosout이 같이 실행됨
2. rosrun turtlesim turtlesim_node //Turtle 시뮬레이션 노드 실행
3. rosrun turtlesim turtle_teleop_key //Turtle 조종 인터페이스 실행
4. rqt_graph //현재 실행 중인 노드들의 정보 표시
5. rqt //현재 실행 중인 노드들의 다양한 정보 표시
sudo apt-get install terminator //터미널 창을 분할해서 쓸 수 있게 하는 패키지



기본 명령어
CTRL + ALT + T // 터미널 열기
CTRL + ALT + Q //터미널 전체 종료
CTRL + ALT + E //터미널 상하 분할
CTRL + ALT + O //터미널 좌우 분할
CTRL + ALT + W //현재 사용 중인 터미널 종료
chmod //change mod, 권한 변경 명령어



ROS IP 할당 및 설정

1. SD 카드를 Remote Computer에 연결
2. cd /media/$USER/writable/etc/netplan  //해당 폴더로 이동
3. sudo nano 50-cloud-init.yaml  //ROS의 네트워크 설정 파일
4. cd .. //상위 폴더 이동
5. sudo nano hostname  //Client(ROS) 이름 변경
6. SD 카드를 ROS의 Raspberry Pi에 연결 후 ON
7. ST-Link에서 ROS의 IP 주소 확인
8. Remote PC에서 'ssh ubuntu@ROS' //ssh(secure shell)로 로봇에 연결, ubuntu@ROS = 로봇의 ip주소와 사용자 이름
9. nano ~/.bashrc //.bashrc파일 편집 (nano 편집기)
10. ROS_MASTER_URI(RemotePC IP주소), ROS_HOSTNAME(ROS IP주소), LDS_MODEL 변경
11. source ~/.bashrc //변경 사항 적용
12. sudo apt update / upgrade //Package List / Package 업데이트
13. sudo apt install libudev-dev //libudev-dev 패키지(udev 시스템 개발 도구 패키지) 설치
14. cd ~/catkin_ws/src //폴더 이동
15. git clone -b develop https://github.com/ROBOTIS-GIT/ld08_driver.git //Git에서 ld08_driver 다운로드
16. cd ~/catkin_ws/src/turtlebot3 && git pull //폴더 이동 후 패키지의 소스 코드 가져오기
17. rm -r turtlebot3_description/ turtlebot3_teleop/ turtlebot3_navigation/ turtlebot3_slam/ turtlebot3_example/ //해당 파일들 제거
18. cd ~/catkin_ws && catkin_make //폴더 이동 후 turtlebot3 패키지 빌드
/*
19. echo 'export LDS_MODEL=LDS-02' >> ~/.bashrc //로봇의 LDS 모델을 LDS-02로 변경
20. source ~/.bashrc //.bashrc의 변경 사항 적용
*/



ROS 기동, 통신 확인

새 터미널
1.
roscore //ros 메인 노드 실행

새 터미널
2.
ssh ubuntu@192.168.1.186 //해당 ip주소 서버(ros)에 ubuntu 유저로 접속
export TURTLEBOT3_MODEL=burger //TURTLEBOT3_MODEL이라는 변수의 값을 burger로 설정 = Turtlebot3의 모델을 burger로
roslaunch turtlebot3_bringup turtlebot3_robot.launch //turtlebot3_bringup이라는 패키지를 이용해 turtlebot3_robot 내의 노드들 실행
/*
nano ~/.bashrc //.bashrc 파일 열기, 해당 파일은 로그인 때 실행되는 shell script이고, ssh ubuntu로 접속할 때마다 실행되게 됨.
export TURTLEBOT3_MODEL=burger
bashrc에 위 문장 추가 시 위의 export 매번 입력하지 않아도 됨
*/
혹은
rosrun turtlesim turtlesim_node

새 터미널
3.
export TURTLEBOT3_MODEL=burger
roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch //ros 조종 인터페이스, turtlebot3_teleop 패키지를 이용해 해당 파일 실행
혹은
rosrun turtlesim turtle_teleop_key

새 터미널
4.
rqt //메시지, 토픽, 서비스 등을 확인 가능한 그래픽 인터페이스 도구
plugins - topics - topic monitor로 들어가면 ros의 position 등을 포함한 데이터들 실시간으로 확인 가능
bandwidth = 통신 속도
introspection - node graph
타원 = 노드, 사각형 = 토픽



ROS Package
http://repositories.ros.org/status_page/ros_noetic_default.html //ROS noetic package 모아놓은 사이트
package.xml //package 정보를 담아놓은 파일(XML 언어)
CMakeLists.txt
/*package의 빌드 환경을 적어놓은 파일
  1. 파일 수정을 위해선 먼저 쓰기 권한을 가져와야 함 = chmod
  2. CMake버전, 필요 package, 통신 방식에 따른 사용 파일 등을 규정
*/
패키지에는 위 두 파일이 무조건 포함되어야 함



명령어 모음
roscd //ros directory 이동
rosls 노드명 //ros 파일 목록
rosrun 노드명 //node 1개 실행
roslaunch 노드명//node 여러개 실행
sudo apt-get install ros noetic-openni-launch
roslaunch openni_launch openni.launch
rosclean check/purge //node 기록 확인/삭제
rosnode list //실행 중인 node 목록
rosnode ping 노드 이름 //node 연결 테스트
rosnode info 노드 이름 //node 정보 확인
rostopic type 토픽 이름 //message 이름 확인
rosmsg show 메시지 이름 //message 내용 확인
rosnode machine IP주소 //해당 PC에서 실행 중인 노드 목록
rosnode kill 노드 이름 //노드 종료
rosnode cleanup //연결 정보가 끊어진 node를 목록에서 제거
rostopic list //활성화된 topic 목록
rostopic echo 토픽 이름 //토픽의 메시지 내용 실시간으로 표시

rostopic pub -1 토픽명 메시지명 -- '[x, y, z]' '[x, y, z]'
//해당 토픽에서 메시지 내보내기, -1 = 1번만 '[]'에 내용 입력
rosservice list //활성화된 서비스 목록
rosservice info, type, uri, args 서비스 이름
//각각 서비스 정보, 타입, ROSRPC uri 서비스, parameter 출력
//type = string, float, int, header, image, pose(위치와 방향), odometry(위치와 속도) 등이 들어갈 수 있음
//uri = 탐색기/IP주소 (메시지의 주소)
//args = 메시지의 인수(내용). 인수의 이름 : 값의 형태를 취함.

rosservice call 서비스명 parameter명 //parameter로 서비스 요청
rosparam get /     //모든 parameter 값 확인
rosparam dump ~파일명  //파라미터를 파일에 저장 ex)rosparam dump ~/parameters.yaml
rosparam set 파라미터명 값  //파라미터에 값 대입
rosservice call clear //변경점 반영
rosparam load ~/파일명  //파일을 불러와 현재 파라미터 값으로 사용  ex)rosparam load ~/parameters.yaml
rosservice call clear //변경점 반영
rosparam delete /파라미터명  //파라미터 삭제



ROS SLAM  //숫자 = 터미널 번호
1  roscore
2  ssh ubuntu@192.168.1.186
roslaunch turtlebot3_bringup turtlebot3_robot.launch
3  roslaunch turtlebot3_slam turtlebot3_slam.launch   //slam 실행, rviz 화면
4  roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch
5  rqt_graph    //장애물을 파악하는 과정에서 다양한 토픽과 노드들이 활성화될 것
6  rosrun map_server map_saver -f ~/map   //pgm(이미지)와 yaml(파리미터)로 저장됨
slam과 teleop 종료 후
3  roslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:=$HOME/map.yaml
Rviz에서 2D Pose Estimate와 teleop_key를 이용해 지도 동기화
2D Nav Goal을 이용하여 자동주행


맵은 자유, 점유, 미지 영역으로 나뉘는데
이는 0~255의 수치로도 표현됨 (occupied_thresh)
255에서 각 색의 수치를 뺀 값을 255로 나눈 값이 1이면 무조건 장애물, 0이면 무조건 빈 공간, 그 사이면 확률적으로 비었거나 장애물이라는것
yaml파일을 수정하면 수치가 얼마 이하면 빈 공간으로 인식하라고 정의내릴 수 있음

토픽		메시지			
/sensor_state	turtlebot3_msgs/SensorState		센서 값
/scan		sensor_msgs/LaserScan		LDS(LIDAR) 스캔 값
/imu		sensor_msgs/Imu			가속도계, 자이로 센서
/odom		nav_msgs/Odometry		Odometry 정보
/tf		tf2_msgs/TFMessage		base_footprint와 odom 값
/joint_states	sensor_msgs/JointState		바퀴 관절의 위치, 속도, 힘
/diagnostics	diagnostic_msgs/DiagnosticArray	자가 진단 정보
/firmware_version	turtlebot3_msgs/VersionInfo		하드웨어/펌웨어/소프트웨어 정보

Inflation Radius
로봇이 벽으로부터 얼마나 떨어져서 주행할지를 정하는 수치

Potential Field - 장애물을 회피하며 이동하는 것을 돕는 알고리즘. 환경을 그리드화하고 그리드의 각 셀에 수치를 부여하는데, 이 값이 낮은 지점으로 로봇이 움직이게 됨.
Particle Filter - 로봇의 위치와 방향을 추정하는 알고리즘, 이것을 더 개량한 것이 Monte Carlo Localization
		처음에 파티클을 수없이 전개한 후 가능성이 높은 파티클은 남기고 낮은 파티클은 없애면서 위치를 추정해나감
		노이즈가 많은 환경에서 이용하기 좋음 (비선형적)
Dynamic Window Approach - 충돌 회피 알고리즘, 속도와 가속도, 장애물 위치와 크기를 이용해 충돌 가능성이 없는 영역을 계산.
gmapping, hector mapping, cartographer - 센서를 활용해 지도를 그리는 알고리즘.

SLAM > Gmapping(SLAM의 일종) > Particle Filter
SLAM > HectorSLAM(SLAM의 일종) > Scan to Map
SLAM > Cartographer(SLAM의 일종) > Pose Graph Optimization

ROS GAZEBO(Simulation) 세팅
cd ~/catkin_ws/src/		//경로 지정
git clone -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git		//클론해오기
cd ~/catkin_ws && catkin_make		//빌드
export TURTLEBOT3_MODEL=burger		//burger 대신 다른 모델명 입력 가능
roslaunch turtlebot3_gazebo turtlebot3_world.launch		//turtlebot3_world 대신 다른 월드명 입력 가능
export TURTLEBOT3_MODEL=burger
roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=gmapping		//SLAM 활성화
roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch



ROS 자율주행 세팅 - 카메라

1, 리모트 PC
cd ~/catkin_ws/src/
git clone -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3_autorace_2020.git	//자율주행 패키지 다운
cd ~/catkin_ws && catkin_make	//빌드

2. ROS
sudo fallocate -l 4G /swapfile	//4GB 크기의 파일 생성
sudo chmod 600 /swapfile		//생성한 파일의 권한 변경
sudo mkswap /swapfile		//활성화
sudo swapon /swapfile		//사용 시작

sudo apt-get update
sudo apt-get install build-essential cmake gcc g++ git unzip pkg-config
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev libavcodec-dev libavformat-dev libswscale-dev libgtk2.0-dev libcanberra-gtk* libxvidcore-dev libx264-dev python3-dev python3-numpy python3-pip libtbb2 libtbb-dev libdc1394-22-dev libv4l-dev v4l-utils libopenblas-dev libatlas-base-dev libblas-dev liblapack-dev gfortran libhdf5-dev libprotobuf-dev libgoogle-glog-dev libgflags-dev protobuf-compiler

cd ~
wget -0 opencv.zip https://github.com/opencv/opencv/archive/4.5.0.zip	//opencv 라이브러리 파일 다운로드
wget -0 opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.0.zip	//opencv 추가모듈 다운로드

unzip opencv.zip		//압축해제
unzip opencv_contrib.zip

mv opencv-4.5.0 opencv	//폴더 이름 변경
mv opencv_contrib-4.5.0 opencv_contrib

cd opencv
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE \	//릴리스 버전으로 빌드
          -D CMAKE_INSTALL_PREFIX=/usr/local \		//설치 경로 지정
          -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \	//추가 모듈 경로 지정
          -D ENABLE_NEON=ON \	//NEON 명령어 활성화
          -D BUILD_TIFF=ON \	//TIFF 지원
          -D WITH_FFMPEG=ON \	//FFmpe 지원
          -D WITH_GSTREAMER=ON \	//GStreamer 지원
          -D WITH_TBB=ON \		//Thread Building Blocks 라이브러리 활성화
          -D BUILD_TBB=ON \		//TBB 빌드 활성화
          -D BUILD_TESTS=OFF \	//테스트 빌드 비활성화
          -D WITH_EIGEN=OFF \	//Eigen 라이브러리 비활성화
          -D WITH_V4L=ON \		//V4L2 활성화
          -D WITH_LIBV4L=ON \	//libv41 라이브러리 활성화
          -D WITH_VTK=OFF \	//VTK 라이브러리 활성화
          -D OPENCV_ENABLE_NONFREE=ON \	//비자유 라이브러리 사용 활성화
          -D INSTALL_C_EXAMPLES=OFF \
          -D INSTALL_PYTHON_EXAMPLES=OFF \
          -D BUILD_NEW_PYTHON_SUPPORT=ON \
          -D BUILD_opencv_python3=TRUE \
          -D OPENCV_GENERATE_PKGCONFIG=ON \
          -D BUILD_EXAMPLES=OFF ..

cd ~/opencv/build
make -j4		//빌드 명령, -j4 = 작업을 한 번에 4개 씩 수행하라 = 작업 시간을 단축
sudo make install
sudo ldconfig
make clean
sudo apt-get update

sudo apt install ffmpeg
ffmpeg -f video4linux2 -s 640x480 -i /dev/video0 -ss 0:0:2 -frames 1 capture_test.jpg		//ffmpeg를 이용해 카메라 영상 캡쳐

sudo apt install ros-noetic-cv-camera
sudo apt install ros-noetic-image-transport ros-noetic-image-transport-plugins ros-noetic-cv-bridge ros-noetic-vision-opencv python3-opencv libopencv-dev ros-noetic-image-proc ros-noetic-cv-camera ros-noetic-camera-calibration

roscore
ssh ubuntu@192.168.1.186
roslaunch turtlebot3_autorace_camera raspberry_pi_camera_publish.launch		//카메라로 이미지 캡처 후 ROS 메시지로 변환해 ROS 네트워크에 게시
rqt_image_view

roslaunch turtlebot3_autorace_camera raspberry_pi_camera_publish.launch
roslaunch turtlebot3_autorace_camera intrinsic_camera_calibration.launch mode:=calibration	//내부 카메라 변수 표시 모드
calibrate - save - extract calibrationdata.tart.gz - open ost.yaml - camera_name 등 수정 - copy ost.yaml into camerav2_320x240_30fps.yaml
//intrinsic calibration 종료

(2) Extrinsic Camera Calibration
roscore
ssh ubuntu@192.168.1.186
roslaunch turtlebot3_autorace_camera raspberry_pi_camera_publish.launch
roslaunch turtlebot3_autorace_camera intrinsic_camera_calibration.launch mode:=action	//카메라 이미지를 얻어 차선 인식/주행 제어, action모드는 calibration으로 얻은 매개변수를 이용함
roslaunch turtlebot3_autorace_camera extrinsic_camera_calibration.launch mod:=calibration	
rqt
Plugins - Visualization - Image View
/camera/image_extrinsic_calib/compressed
projected view가 길의 중앙에 위치하는지 확인
/camera/image_projected_compensated도 확인

rosrun rqt_reconfigure rqt_reconfigure
image compensation projection과 image projection
터틀봇이 30~40cm 정도 앞을 보도록 수치를 조정
catkin_ws/src/turtlebot3_autorace_2020/turtlebot3_autorace_camera/calibration/extrinsic_calibration에 Projection_new_temp.yaml로 저장
catkin_ws/src/turtlebot3_autorace_2020/turtlebot3_autorace_camera/calibration/extrinsic_calibration의 projection.yaml에도 위의 값 반영

(3)Test
roscore
ssh ubuntu@192.168.1.186
roslaunch turtlebot3_autorace_camera raspberry_pi_camera_publish.launch
roslaunch turtlebot3_autorace_camera intrinsic_camera_calibration.launch mode:=action
roslaunch turtlebot3_autorace_camera extrinsic_camera_calibration.launch mode:=action
roslaunch turtlebot3_autorace_detect detect_lane.launch mode:=calibration
rqt
intrinsic/extrinsic camera calibration 반영 값 확인
plugins - visualization - image view로 
/detect/image_yellow_lane_marker/compressed		//노란 선 인식 확인
/detect/image_white_lane_marker/compressed		//하얀 선 인식 확인
/detect/image_lane/compressed			//종합적인 인식 확인
총 3개를 각각 띄우고 camera에서 lane이 적절하게 보이는 지 확인

rosrun rqt_reconfigure rqt_reconfigure에서 detect lane 선택
rqt image를 보면서 calibration 진행
catkin_ws/src/turtlebot3_autorace_2020/turtlebot3_autorace_detect/param/lane에 lane_new_temp.yaml로 저장
lane.yaml 수정

(4)주행
roscore
ssh ubuntu@192.168.1.186
roslaunch turtlebot3_autorace_camera raspberry_pi_camera_publish.launch
ssh ubuntu@192.168.1.186
roslaunch turtlebot3_bringup turtlebot3_robot.launch		//로봇 기본 기능 활성화
roslaunch turtlebot3_autorace_camera intrinsic_camera_calibration.launch mode:=action	
roslaunch turtlebot3_autorace_camera extrinsic_camera_calibration.launch mode:=action
roslaunch turtlebot3_autorace_detect detect_lane.launch mode:=action
roslaunch turtlebot3_autorace_driving turtlebot3_autorace_control_lane.launch	//자율주행 시작



전체 과정 재정리
1. ROS 조립
2. 리모트 PC 세팅 (Ubuntu, ROS, Turtlebot3 패키지 설치)
3. ROS에 IP 할당 (50-clout-init.yaml, hostname, bashrc 수정 등 필요)
4. SLAM 실험 - Inflation Radius 등 mapping과 관련된 yaml 수정
5. 카메라 세팅 - opencv lib, ffmpeg 등 다운로드, intrinsic/extrinsic camera calibration 설정
6. 자율주행 실험 - roslaunch turtlebot3_autorace_driving turtlebot3_autorace_control_lane.launch
